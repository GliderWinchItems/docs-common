tunnel-setup.txt
03/23/24

Problem--
Computer A wants to ssh into computer B and get a terminal window, BUT
compute A and computer B can only originate connections outward.

Solution--
Computer C is able to open a port to accept incoming connections.
Computer B sshs to C and sets up reverse portforwarding on C.
Computer A sshs to C and sshs to a the local portforward port.

Good picture to help understand--
https://unix.stackexchange.com/questions/132326/initiate-ssh-connection-from-server-to-client

Test the setup--

1. Set reverse port forwarding on computer C

For this example: 
C is Rpi listening on 47.204.211.51 port 41571
  where 47.204.211.51 is the internet IP
    and 41571 is C's listening port which is,
    set in /etc/ssh/sshd_config

B is netbook that can only originate outwards.
- ssh listening port: 41576

B starts the reverse port on C with the following--
ssh -R 22222:localhost:41576 47.204.211.51 -p 41571 &

Note: 
41576 is the ssh listening port of B  but,
  likely 22 on a machine with sshd_config with defaults.
To verify listening port: 
cat /etc/ssh/sshd_config
and look for "Port", e.g. the following lines--
  # What ports, IPs and protocols we listen for
  Port 41576

Note:
22222 is an arbitrary port number chosen not to confilct with other services
Incoming traffic on C to port 22222 is forwarded, in this case to the
B, the netbook, on port 41576.

Other machines wanting to get a terminal window on B will first
ssh to C, then ssh to B using C's local port 22222 (step 2. below).

2. ASUS laptop pretends to be computer A
- Ubuntu 22.04, ssh listen 22
  [login to computer C]
    ssh deh@47.204.211.51 -p 41571
  [login to computer B}
    ssh deh@localhost -p 22222



Notes & Problems:
1. For A the exit is two steps, i.e. first exit B, then exit C.

2. B needs ssh keys from A.

3. C needs /etc/ssh/sshg_config to allow forwarding--
GatewayPorts yes

4. Keepalive? (needs some study)
Append the following line (before the '&') that sets up reverse port forwarding
ssh -R 22222:localhost:41576 47.204.211.51 -p 41571
With options--
 " -o ServerAliveInterval=60 -o ServerAliveCountMax=3"

5. Copying keys
If .ssh directory not present--
cat ~/.ssh/id_rsa.pub | ssh <user>@<hostname> 'umask 0077; mkdir -p .ssh; cat >> .ssh/authorized_keys && echo "Key copied"'

ssh-copy-id "user@hostname.example.com -p <port-number>"
Copies the public key of your default identity (add -i identity_file for other identities) to the remote host.

https://linuxize.com/post/how-to-set-up-ssh-keys-on-ubuntu-1804/

6. Port number reuse

In the example port 22222 was arbitrary. If the port forwarding is stopped and 
the port forwarding set up is attempted that 22222 may not be available for a
period of time, e.g. 1-2 hours. Solution: Select a different number.



